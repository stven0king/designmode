package com.tzx.adapter;

/**
 * Created by tanzhenxing on 17-6-13.
 * Adapter(适配器模式):将一个类的接口转化为客户希望的另一个接口。Adapter模式使得原本由于接口不同而不能一起工作的那些类可以在一起工作。
 *
 * 类适配器模式
 * 目标（Target）角色:这就是所期待得到的接口。注意：由于这里讨论的是类适配器模式，因此目标不可以是类。
 * 源（Adaptee）角色：现在需要适配的接口
 * 适配器（Adapter）角色：适配器类是本模式的核心。适配器把源接口转化成目标接口。显然者一角色不可以是接口，而必须是具体类。
 *
 * 类适配器和对象适配器的权衡
 1、类适配器使用对象继承的方式，是静态的定义方式；而对象适配器使用对象组合的方式，是动态组合的方式。
 2.1、对于类适配器，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，因为继承是静态的关系，当适配器继承了Adaptee后，就不可能再去处理  Adaptee的子类了。
 2.2、对于对象适配器，一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目标接口。因为对象适配器采用的是对象组合的关系，只要对象类型正确，是不是子类都无所谓。
 3、对于类适配器，适配器可以重定义Adaptee的部分行为，相当于子类覆盖父类的部分实现方法。　　 对于对象适配器，要重定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。虽然重定义Adaptee的行为比较困难，但是想要增加一些新的行为则方便的很，而且新增加的行为可同时适用于所有的源。
 4.1、对于类适配器，仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee。
 4.2、对于对象适配器，需要额外的引用来间接得到Adaptee。
 建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。当然，具体问题具体分析，根据需要来选用实现方式，最适合的才是最好的。
 */
public class Main {
    public static void mian(String[] args) {

    }
}
